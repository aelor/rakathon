<script>
    function initMap() {
        var input = document.getElementById('query');
        var autocomplete = new google.maps.places.Autocomplete(input);

        // Set the data fields to return when the user selects a place.
        autocomplete.setFields(
            ['address_components', 'geometry', 'icon', 'name']);

        autocomplete.addListener('place_changed', function() {
            var place = autocomplete.getPlace();
            if (!place.geometry) {
                // User entered the name of a Place that was not suggested and
                // pressed the Enter key, or the Place Details request failed.
                window.alert("No details available for input: '" + place.name + "'");
                return;
            }

            var address = '';
            console.log(place);
            if (place.address_components) {
                address = [
                    (place.address_components[0] && place.address_components[0].short_name || ''),
                    (place.address_components[1] && place.address_components[1].short_name || ''),
                    (place.address_components[2] && place.address_components[2].short_name || '')
                ].join(' ');
            }

            var lat = place.geometry.location.lat();
            var lng = place.geometry.location.lng();

            location.href = "/search?lat="+lat+"&lng="+lng+"&address="+address;
        });
    }
</script>
<div class="container-fluid">
  <div class="row">
    <input id="query" value="<%= params[:address]%>" />
    <i class="fa fa-map-marker"></i>
    <div class="col-md-3 sidelist">
      <% @search_records.each do |sr| %>
        <div class="sideitem card">
          Name: <%= sr.name %><br />
          Address: <%= sr.address %><br />
          Price: <%= sr.price %><br />
          Distance from you: <%  %>
        </div>
      <% end %>
    </div>
    <div class="col-md-9">
      <div class="row">
      <div id="map" style="width: 100%; height: calc(100vh - 50px); background: grey"></div>
      </div>
    </div>
  </div>
</div>
<input id="lat" type="hidden" value=<%= params[:lat] %> />
<input id="lng" type="hidden" value=<%= params[:lng] %> />
<script>
    function addMarkersToMap(map) {
        var lat = document.getElementById('lat').value;
        var lng = document.getElementById('lng').value;
        var carmarker = 'assets/car.svg';
        var parkmarker = 'assets/marker.svg';
        var icon = new H.map.Icon(carmarker, {size: {w: 56, h: 56}});
        var parkingicon = new H.map.Icon(parkmarker, {size: {w: 46, h: 46}});
        var currentLocation = new H.map.Marker({lat: lat, lng: lng}, {icon: icon});
        map.addObject(currentLocation);
        <% @search_records.each_with_index do |sr, i| %>
          var html = '<div><%= sr.name %>' +
              '<%= sr.address %>' +
              '<%= sr.try(:distance) %>' +
              '<button class="btn btn-primary">BOOK NOW</button>';
          ;
          var x = new H.map.Marker({lat: "<%= sr.latitude %>", lng: "<%= sr.longitude %>"}, {icon: parkingicon});
          x.setData(html);
          map.addObject(x);
          x.addEventListener('tap', function (evt) {
            console.log("<%= sr.latitude %>", "<%= sr.longitude %>");
            var w0 = 'geo!'+lat+','+lng;
            var w1 = 'geo!'+"<%= sr.latitude %>"+','+"<%= sr.longitude %>";

            var bubble =  new H.ui.InfoBubble(evt.target.getPosition(), {
                content: evt.target.getData()
            });
            // show info bubble
            ui.addBubble(bubble);
            plotRoute(w0, w1);
          });
        <% end %>

        map.setCenter({lat: lat, lng: lng});
        map.setZoom(15);
    }

    var platform = new H.service.Platform({
        app_id: 'O6wvLnpoWWZUhQdvbCKs',
        app_code: 'qsEnIY2HId-eVLmTaX4YGQ',
        useHTTPS: true
    });
    var pixelRatio = window.devicePixelRatio || 1;
    var defaultLayers = platform.createDefaultLayers({
        tileSize: pixelRatio === 1 ? 256 : 512,
        ppi: pixelRatio === 1 ? undefined : 320
    });

    //Step 2: initialize a map - this map is centered over Europe
    var map = new H.Map(document.getElementById('map'),
        defaultLayers.normal.map,{
            center: {lat:50, lng:5},
            zoom: 4,
            pixelRatio: pixelRatio
        });

    //Step 3: make the map interactive
    // MapEvents enables the event system
    // Behavior implements default interactions for pan/zoom (also on mobile touch environments)
    var behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));

    // Create the default UI components
    var ui = H.ui.UI.createDefault(map, defaultLayers);
    addMarkersToMap(map);

    var routeLine;
    function plotRoute(w0, w1){

        console.log(routeLine !== undefined);
        if (routeLine !== undefined){
            map.removeObject(routeLine);
        }
        var routingParameters = {
            // The routing mode:
            'mode': 'fastest;car',
            // The start point of the route:
            'waypoint0': w0,
            // The end point of the route:
            'waypoint1': w1,
            // To retrieve the shape of the route we choose the route
            // representation mode 'display'
            'representation': 'display'
        };

// Define a callback function to process the routing response:
        var onResult = function(result) {
            // map.removeObject(routeLine);
            var route,
                routeShape,
                linestring;
            if(result.response.route) {
                // Pick the first route from the response:
                route = result.response.route[0];
                // Pick the route's shape:
                routeShape = route.shape;

                // Create a linestring to use as a point source for the route line
                linestring = new H.geo.LineString();

                // Push all the points in the shape into the linestring:
                routeShape.forEach(function(point) {
                    var parts = point.split(',');
                    linestring.pushLatLngAlt(parts[0], parts[1]);
                });

                // Create a polyline to display the route:
                routeLine = new H.map.Polyline(linestring, {
                    style: { strokeColor: 'blue', lineWidth: 5 }
                });

                // Add the route polyline and the two markers to the map:
                map.addObjects([routeLine]);

                // Set the map's viewport to make the whole route visible:
                map.setViewBounds(routeLine.getBounds());
            }
        };

        var router = platform.getRoutingService();
        router.calculateRoute(routingParameters, onResult,
            function(error) {
                alert(error.message);
            });
    }
</script>